using Type, Format, Units;
//==============================================================================================================
// Size and color information
//==============================================================================================================

OutputFile = IO.Folders.Main IO.FileName("Family History") IO.Extensions.PDF;

Main.Run = [
  IO.Write(Watch, OutputFile),
  IO.OpenDocument(OutputFile),
];

with Metrics
  CurrentDate    = System.Now;
  TreeText       = 5.8 pts;
  LevelIndent    = 0.25 inches;
  IconColor      = Color(73, 112, 163);
  LineColor      = Color(62, 94, 136);
  BoxColor       = Color(182, 199, 222);
  DateIndent     = 1.35 inches;
  MainMargin     = Margin(0.75 inches, 0.75 inches, 0.75 inches, 0.75 inches);
  TreeMargin     = Margin(0.5 inches, 0.125 inches, 0.125 inches, 0.5 inches);
  Paper          = Size(8.5 inches, 11 inches);
  Content        = Paper - MainMargin;
  TreeContent    = Paper - TreeMargin;
  StoryPicture   = Size(Content.Width, 3 inches);
  PersonPicture  = Size(1.5 inches);
  PortraitHeight = 1 inch;
  PortraitAngle  = 5 degrees;
end
//=============================================================================================================

Picture = {
  HasPicture: true,
};

Nick(name) = {
  NickName: name
};

Died(year, month=null, day=null) = {
  if (year == 0)
    DeathDateUnknown: true,
  else
    Death: DateTime(year, month, day)
  end
};

Divorced(year, month=null, day=null) = {
  DivorceDate: DateTime(year, month, day)
};

DatePlace(year, month, day, place) = {
  if (year)
    Date: DateTime(year, month, day),
  end,
  Place: place,
};

Born(year, month=null, day=null, place=null)    = DatePlace(year, month, day, place);
Married(year, month=null, day=null, place=null) = DatePlace(year, month, day, place);

Formerly(name) = {
  Ne: name,
};

with Stories end
with Unions end
with Persons end
with Places end

AddPlace(city, state, country=null) = {
  Country: country ?? "USA",
  City: city,
  State: state
};

Attendees(list, text) = Span {
  Span {
    Separator: ", ",
    (each list).ShowLink,
  },
  text
};

GatherEvent(event, list) begin
  if (event.Date)
    event.AddEvent(list)
  end
end

SortFunc(x, y) = Math.Compare(x.Date, y.Date);

SortEvents(events) begin
  var sortlist = Type.List(256);
  GatherEvent(each events, sortlist);
  return sortlist.Sort(false, SortFunc);
end

GatherPicture(list, union) begin
  if (union.Partner1.HasPicture and union.Partner2.HasPicture)
    list.AddElement(union)
  end
end

GatherPictures(unions) begin
  var list = Type.List(256);
  GatherPicture(list, each unions);
  return list;
end

PeopleAndUnions = Unions + People;
SortedEvents    = SortEvents(PeopleAndUnions + Stories);
PictureList     = GatherPictures(Unions);

//===============================================================================================================
// Class definitions
//===============================================================================================================

class EventClass
  var Date,
      Icon,
      Place,
      HasPicture;

  init(date) begin
    Date = date;
  end

  virtual DrawTimeline begin
  end

  virtual AddEvent(list) begin
    list.AddElement(this)
  end

  virtual DrawListing(level) begin
  end

  virtual FindChildren(set, parent) begin
  end

  virtual FormatNode(parent) begin
  end

  virtual ShowFull begin
  end

  ImagePath = IO.Folders.Main IO.FileName(this.Name) IO.Extensions.JPG;

  AddPicture(size) = IO.Read(ImagePath) {
    Size: size,
    Proportional: true
  };
end
//===============================================================================================================

ShowEachLink(child) = child.ShowFullLink(false);

class PersonClass: EventClass
  var Parent,
      Death,
      First,
      Middle,
      Last,
      Ne,
      NickName,
      DeathDateUnknown;

  init(first, middle, last, parent) begin
    super.init(null);
    First  = first;
    Middle = middle;
    Last   = last;
    Parent = parent;
  end

  override AddEvent(list) begin
    list.AddElement(this);
    if (Death)
      list.AddElement(new PassingClass(this));
    end
  end

  override FindChildren(set, parent) = set.AddElement(this) && Parent == parent;

  override FormatNode(parent) = {
    Label: TreePerson(null)
  };

  override DrawTimeline = {
    ShowFullLink(false),
    Space,
    "was born"
  };

  override DrawListing(level) = Styles.LevelPar(level, false) {
    ShowListing,
  };

  override ShowFull = Block {
    if (HasPicture)
      Paragraph {
        SpaceAfter: 10 pts,
        Group {
          Padding: 2 pts,
          VAlign: VAligns.Top,
          Frame {
            Width: Metrics.Content.Width - Metrics.PersonPicture.Width,
            ShowFullPersonData,
          },
          AddPicture(Metrics.PersonPicture),
        }
      }
    else
      ShowFullPersonData,
      Paragraph,
    end
  };

  override ShowLink(text=null) = Span {
    Link: this.Key,
//    Popup: Delegate(ref Popup),
    TextColor: Colors.Blue,
    text ?? (NickName ?? First)
  };

  ShowFullName(former) = Span {
    Separator: Space,
    First,
    Middle,
    if (former)
      Ne ?? Last,
    else
      Last
    end
  };

  ShowFullLink(former) = ShowFullName(former) {
    Link: this.Key,
//    Popup: Delegate(ref Popup),
  };

  override ShowListing = Span {
    Icon,
    Space,
    ShowFullLink(false),
    if (Ne)
      " (né {0})"(Ne)
    end,
    if (Death)
      Span {
        TextColor: Colors.DarkGray,
        Styles.TextDate(", died ", Death),
      }
    end
  };

  TreePerson(parent) = Group {
    VAlign: VAligns.Center,
    Span {
      Span {
        if (parent == Parent)
          TextColor: Colors.White,
        else
          TextColor: Metrics.IconColor,
        end
        Icon,
      },
      Space,
      Link: this.Key,
//      Popup: Delegate(ref Popup),
      NickName ?? First,
    }
  };

  ShowFullPersonData = Block {
    FullPar {
      LocationMark: this.Key,
      LeftIndent: Metrics.LevelIndent,
      FirstIndent: -Metrics.LevelIndent,
      TextHeight: 16 pts,
      Icon,
      Tab,
      ShowFullName(false) {
        if (NickName)
          Span {
            " - \"",
            NickName,
            "\""
          },
        end,
      },
    },
    if (Ne)
      FullPar {
        Italic "né ",
        ShowFullName(true)
      }
    end

    if (Date)
      if (DeathDateUnknown)
        FullPar {
          "Unknown time of death",
        },
      else
        if (not Death and (Metrics.CurrentDate - Date).Years < 100)
          FullPar {
            "{0} years old"(Math.Floor((Metrics.CurrentDate - Date).Years))
          },
        end,
      end,
      FullPar {
        if (Date)
          Styles.TextDate("Born ", Date),
        end,
        if (Death)
          LineBreak,
          Styles.DiedAge(this)
        end,

        if (Place)
          " in ",
          Styles.ShowPlace(Place),
        end,
      },
    end,

    if (Parent)
      ShowParents(Parent)
    end,
    ShowChildren,
  };

  ShowChildren begin
    var unions = Unions.FindSlice(FindUnion, {Person: this});
    if (unions.Length > 0)
      var children = CollectChildren(People, unions[0]);
      if (children.Length > 0)
        return FullPar {
          "Children: ",
          Span {
            Separator: ", ",
            LastSeparator: " and ",
            ShowEachLink(each children),
          }
        };
      end
    end
    return null;
  end

  Popup = Frame {
    if (HasPicture)
      Width: Metrics.Content.Width,
    else
      Width: Metrics.Content.Width - Metrics.PersonPicture.Width,
    end,
    ShowFull
  };

  PortraitFrame(angle) = Canvas {
    BorderT: 4 pts {Color: TopColor..BottomColor {Vertical: true}},
    BorderLR: 4 pts {Color: TopColor..BottomColor},
    BorderB: 4 pts {Color: TopColor..BottomColor {Vertical: true}},

    Transform: Rotate(angle) Skew(angle, angle),
    TransformFit: true,
    IO.Read(ImagePath) {
      Link: this.Key,
  //    Popup: person.Delegate(ref person.Popup),
      Size: Size(Metrics.PortraitHeight),
      Proportional: true,
    },
  };
end
//===============================================================================================================

class Female: PersonClass
  init(first, middle, last, parent=null) begin
    super.init(first, middle, last, parent);
    Icon = Styles.TextIcon(Chars.WhiteCircle);
  end
end

class Male: PersonClass
  init(first, middle, last, parent=null) begin
    super.init(first, middle, last, parent);
    Icon = Styles.TextIcon(Chars.WhiteSquare);
  end
end
//===============================================================================================================

class Union: EventClass
  var Partner1,
      Partner2;

  init(partner1, partner2, date=null) begin
    Assert(partner1 and partner2, "Expecting both partners");
    super.init(date);
    Partner1 = partner1;
    Partner2 = partner2;
    Icon     =  Styles.TextIcon("\u2A01");
  end

  override FormatNode(parent) = {
    Marker: Group {
      Vertical: true,
      Background: Metrics.BoxColor,
      Partner1.TreePerson(parent),
      Partner2.TreePerson(parent),
    }
  };

  override FindChildren(set, parent) begin
    set.AddElement(Partner1);
    set.AddElement(Partner2);
    return Partner1.Parent == parent or Partner2.Parent == parent;
  end

  override DrawTimeline = {
    Partner1.ShowFullLink(true),
    Space,
    "married",
    Space,
    Partner2.ShowFullLink(true),
  };

  override DrawListing(level) = Block {
    Styles.LevelPar(level) {
      Partner1.ShowListing,
    },
    Styles.LevelPar(level) {
      Tab,
      Span {
        Icon,
        Space,
        TextColor: Metrics.IconColor
      },
      Styles.TextDate(Space, Date),
    },
    Styles.LevelPar(level) {
      Partner2.ShowListing,
    }
  };

  Title = Span {
    Partner1.ShowFullName(false),
    " and ",
    Partner2.ShowFullName(false),
  };

  ShowPortrait = Group {
    VAlign: VAligns.Top,
    Partner1.PortraitFrame(-Metrics.PortraitAngle),
    Canvas {
      MarginTB: 8 pts,
      Width: 2 pts,
      Height: Metrics.PortraitHeight,
      Background: 60%,
    },
    Partner2.PortraitFrame(Metrics.PortraitAngle),
  };
end
//===============================================================================================================

class PassingClass: EventClass
  var Person;

  init(person) begin
    super.init(person.Death);
    Person = person;
    Icon   = Styles.TextIcon("\u2A4D");
  end

  override DrawTimeline = Span {
    Person.ShowFullLink(false),
    " died",
    Styles.DiedAtAge(Person)
  };
end
//===============================================================================================================

class Story: EventClass
  var ToldBy,
      Text,
      Title;

  init(toldby, title, date) begin
    super.init(date);
    ToldBy = toldby;
    Title  = title;
    Icon   = Styles.TextIcon("\u25A4");
  end

  override DrawTimeline = Span {
//    Popup: Delegate(ref Popup),
    Link: this.Key,
    Title,
  };

  Popup = Frame {
    Width: Metrics.Content.Width - Metrics.StoryPicture.Width,
    Text,
  };

  override ShowFull = Block {
    Paragraph {
      SpaceBefore: 16 pts,
      ParBackground: 90%,
      LocationMark: this.Key,
      Styles.ShowDate(Date),
      ": ",
      Span {
        Bold, Italic,
        Title
      },
      if (ToldBy)
        " as told by ",
        ToldBy.ShowFullLink(false)
      end
    },
    Block {
      Text,
      if (HasPicture)
        Paragraph {
          AddPicture(Metrics.StoryPicture),
        }
      end,
    }
  };
end
//============================================================================================================
// Document styles
//============================================================================================================

with Styles
  Header1(text) = Paragraph {
    TextHeight: 18 pts,
    SpaceAfter: 12 pts,
    Bold,
    text
  };

  Header2(text) = Paragraph {
    BorderB: 0.5,
    TextFamily: TextFamilies.Garamond,
    TextHeight: 16 pts,
    SpaceBefore: 12 pts,
    SpaceAfter: 6 pts,
    Bold,
    text
  };

  TextIcon(text) = Span {
    TextFamily: TextFamilies.CambriaMath,
    text
  };

  ShowDate(d) = Span {
    if (d.Precision == DatePrecisions.Year)
      TextFormat: "yyyy",
    else
      if (d.Precision == DatePrecisions.Month)
        TextFormat: "MMMM yyyy",
      else
        TextFormat: "MMMM dd, yyyy",
      end
    end,
    d,
  };

  TimelineDate(d) = Span {
    if (d.Precision == DatePrecisions.Year)
      TextFormat: "yyyy",
    else
      if (d.Precision == DatePrecisions.Month)
        TextFormat: "yyyy, MMMM",
      else
        TextFormat: "yyyy, MMMM dd",
      end
    end,
    d,
  };

  TextDate(text, d) begin
    if (d)
      return Span {
        text,
        Space,
        ShowDate(d),
      };
    else
      return null
    end
  end

  ShowPlace(place) = Span {
    place.City,
    ", ",
    place.State,
  };

  DiedAge(person) = Span {
    TextDate("Died ", person.Death),
    if (person.Date)
      DiedAtAge(person)
    end
  };

  DiedAtAge(person) = Span {
     ", at age {0}"(Math.Floor((person.Death - person.Date).Years))
  };

  LevelPar(level, border=true) = Paragraph {
    LeftIndent: level*Metrics.LevelIndent + 12 pts,
    FirstIndent: -12 pts,
    if (border)
      BorderL: 3 pts {Color: 90%, Padding: 3 pts},
    end
  };

  Story = Paragraph {
    FirstIndent: 16 pts,
  };
end
//============================================================================================================

FullPar = Paragraph {
  LeftIndent: Metrics.LevelIndent,
};

FindUnion(union, data) = union.Partner1 == data.Person or union.Partner2 == data.Person;


ShowParents(union) = FullPar {
  "Parents: ",
  if (union.Partner1)
    union.Partner1.ShowFullLink(false),
  end,
  " and ",
  if (union.Partner2)
    union.Partner2.ShowFullLink(false)
  end
};
//============================================================================================================
// Timeline
//============================================================================================================

with Timeline
  MaxWidth   = Metrics.Content.Width pixels;
  RowHeight  = 9 pts;
  Edge       = 12 pts;
  InnerWidth = MaxWidth - Edge*2;
  MaxRows    = Math.Floor((Metrics.Content.Height pixels - 0.5 inches).DivideUnits(RowHeight));

  AddEvent(event, yearstart, yearend) begin
    var frac = (event.Date.Year - yearstart) / (yearend - yearstart + 1);
    var x    = InnerWidth * frac;
    if (frac > 0.5)
      return Canvas {
        Y: RowHeight * EachIndex,
        Width: x,
        HAlign: HAligns.Right,
        Span {
          event.DrawTimeline,
          Space,
          event.Icon {TextColor: Metrics.IconColor},
        }
      };
    else
      return Canvas {
        X: x,
        Y: RowHeight * EachIndex,
        Span {
          event.Icon {TextColor: Metrics.IconColor},
          Space,
          event.DrawTimeline
        }
      };
    end
  end

  ShowBlock(events) begin
    var yearstart  = (Math.Floor(events.FirstElement.Date.Year) div 10) * 10; // Round down to the nearest 10 years
    var yearend    = (Math.Floor(events.LastElement.Date.Year + 9) div 10) * 10; // Round up to the nearest 10 years

    return Paragraph {
      SpaceAfter: 10 pts,
      Group {
        Vertical: true,
        Paragraph {
          HAlignment: HAligns.Center,
          TextHeight: 12 pts,
          Bold,
          "Event Timeline",
        },
        Group {
          Vertical: true,
          ChartAxis {
            Width: MaxWidth,
            Start: yearstart,
            Stop: yearend,
          },
        },
        Canvas {
          X: Edge,
          Width: InnerWidth,
          Border: 0.25 pts,
          TextHeight: 8 pts,
          AddEvent(each events, yearstart, yearend),
        }
      }
    };
  end

  AddRows(event) = Paragraph {
    LeftIndent: Metrics.DateIndent,
    FirstIndent: -Metrics.DateIndent,
    Styles.TimelineDate(event.Date),
    Tab,
    Tab,
    event.Icon {TextColor: Metrics.IconColor},
    Space,
    event.DrawTimeline
  };

  Show = Block {
    ShowBlock(each (SortedEvents / MaxRows)),
    Styles.Header2("Timeline Details"),
    AddRows(each SortedEvents),
  };
end
//============================================================================================================
// Tree
//============================================================================================================

FindChildData(c, data) begin
  c.FindChildren(data.Set, data.Parent)
end

CollectChildren(list, c) begin
  var set = Type.Dictionary(PeopleAndUnions.Length);
  return list.FindSlice(FindChildData, {Parent: c, Set: set});
end

MakeTreeNodes(list, parent, event) = Node {
  event.FormatNode(parent),
  MakeTreeNodes(list, event, each CollectChildren(list, event))
};
//============================================================================================================
//  Family member listing
//============================================================================================================

BuildListing(list, event, level) = Block {
  event.DrawListing(level),
  BuildListing(list, each CollectChildren(list, event), level+1),
};

Leaf = Node {
  Marker: Styles.TextIcon(Chars.WhiteCircle)
};

IconTree = Node {
  Node {
    Leaf {Branch: 4},
    Node {
      Branch: 2,
      Leaf {Branch: 2},
      Node {
        Leaf, Leaf
      }
    }
  },
  Node {
    Branch: 3,
    Node {
      Leaf, Leaf
    },
    Leaf {Branch: 2}
  }
};

HeaderFormat = Paragraph {
  TextHeight: 10 pts,
  TextFamily: TextFamilies.TimesNewRoman,
  BorderBottom: 0.25 pts,
};

DocSection(title, name) = Section {
  SectionBreak: SectionBreaks.NextPage,
  Header: Block {
    Distance: 0.5 inches,
    HeaderFormat {
      ParAlignment: ParAlignments.Right,
      name
    },
    Even: Block {
      HeaderFormat {
        ParAlignment: ParAlignments.Left,
        title
      }
    },
    First: Block {
    }
  },
  Footer: Block {
    Distance: 0.5 inches,
    Paragraph {
      ParAlignment: ParAlignments.Center,
      PageNumber
    },
  },
};

TopColor    = 94%;
BottomColor = 80%;

ShowPortraitLine(unions) = Group {
  Separator: Space*3,
  (each unions).ShowPortrait
};

AlbumTitlePage(title) = Section {
  SectionBreak: SectionBreaks.NextPage,
  ParAlignment: ParAlignments.Center,
  Paragraph {
    TextHeight: 36 pts,
    title,
  },
  Paragraph {
    Tree {
      Height: 60 pts,
      Marker: Styles.TextIcon(Chars.Square) {TextColor: Metrics.BoxColor},
      Vertical: true,
      Reverse: true,
      Stroke: 2 pts {Color: Metrics.LineColor},
      Curvature: 20%,
      Bevel: 20%,
      NodeGap: 20 pts,
      IconTree
    },
  },
  Paragraph {
    TextHeight: 16 pts,
    Styles.ShowDate(Metrics.CurrentDate)
  },
  Paragraph {
    Group {
      Vertical: true,
      HAlign: HAligns.Center,
      ShowPortraitLine(each (PictureList / 4))
    }
  },
};

ShowFullList(event) = event.ShowFull;

ShowFullEvents(list, title) begin
  if (list.Length > 0)
    return Block {
      PageBreak,
      Styles.Header2(title),
      ShowFullList(each list),
    }
  end
end


ShowFamilyLine(title, union) = DocSection(title, union.Title) {
  SectionBreak: SectionBreaks.NextPage,
  Styles.Header2("Tree Details"),
  BuildListing(PeopleAndUnions, union, 0),
};

ShowDetails(title) = DocSection(title, "Details") {
  Timeline.Show,
  ShowFullEvents(Stories, "Stories"),
  ShowFullEvents(People, "Family Members"),
};

ShowSource(title) = DocSection(title, "Source Data") {
  Paragraph {
    TextHeight: 8 pts,
    SourceSelection(System.SourceList[0])
  }
};

ShowTree(title, union) = Section {
  SectionBreak: SectionBreaks.NextPage,
  Margin: Metrics.TreeMargin,
  Styles.Header1("The Descendants of " union.Title),
  Tree {
    TextHeight: Metrics.TreeText,
    Width: Metrics.TreeContent.Width,
    Bevel: 10%,
    Curvature: 10%,
    Stroke: 0.25 pts {Color: Metrics.LineColor},
    MakeTreeNodes(PeopleAndUnions, null, union),
  },
  ShowFamilyLine(title, union),
};

FamilyAlbum(title, lines) = Document {
  Size: Metrics.Paper,
  Margin: Metrics.MainMargin,
  AlbumTitlePage(title),
  ShowTree(title, each lines),
  ShowDetails(title),
//  ShowSource(title),
};
//============================================================================================================


