using Type, Format, Units;
//==============================================================================================================
// Size and color information
//==============================================================================================================

OutputFile = IO.Folders.Main IO.FileName("Family History") IO.Extensions.PDF;

Main.Run = [
  IO.Write(Watch, OutputFile),
  IO.OpenDocument(OutputFile),
];

with Metrics {
  CurrentDate    = System.Now;
  TreeText       = 5.8 pts;
  LevelIndent    = 0.25 inches;
  IconColor      = Color(73, 112, 163);
  LineColor      = Color(62, 94, 136);
  BoxColor       = Color(182, 199, 222);
  DateIndent     = 1.35 inches;
  MainMargin     = Margin(0.75 inches, 0.75 inches, 0.75 inches, 0.75 inches);
  TreeMargin     = Margin(0.5 inches, 0.125 inches, 0.5 inches, 0.5 inches);
  Paper          = Size(8.5 inches, 11 inches);
  Content        = Paper - MainMargin;
  TreeContent    = Paper - TreeMargin;
  StoryPicture   = Size(Content.Width, 2.5 inches);
  PersonPicture  = Size(1.5 inches);
  PortraitHeight = 1.4 inch;
  PortraitAngle  = 5 degrees;
}
//=============================================================================================================

Picture = {
  HasPicture: true;
};

Nick(name) = {
  NickName: name
};

Died(year, month=null, day=null) = {
  if (year == 0)
    DeathDateUnknown: true;
  else
    Death: DateTime(year, month, day);
};

Divorced(year, month=null, day=null) = {
  DivorceDate: DateTime(year, month, day)
};

DatePlace(year, month, day, place) = {
  if (year)
    Date: DateTime(year, month, day);
  Place: place;
};

Born(year, month=null, day=null, place=null)    = DatePlace(year, month, day, place);
Married(year, month=null, day=null, place=null) = DatePlace(year, month, day, place);

Formerly(name) = {
  Nee: name;
};

AddPlace(city, state, country=null) = {
  Country: country ?? "USA";
  City: city;
  State: state
};

ListPeople(list) = Span {
  Span {
    Separator: ", ";
    LastSeparator: " and ";
    (each list).ShowLink;
  };
};

Attendees(begin, list, end=null) = Span {
  begin;
  ListPeople(list);
  end ?? ". "
};

GatherEvent(event, list) {
  if (event.Date)
    event.AddEvent(list);
}

SortFunc(x, y) = x.Date.Compare(y.Date);

SortEvents(events) {
  var sortlist = new ListClass(256);
  GatherEvent(each events, sortlist);
  return sortlist.Sort(false, SortFunc);
}

GatherPicture(list, union) {
  if (union.Partner1.HasPicture and union.Partner2.HasPicture)
    list.Add(union);
}

GatherPictures(unions) {
  var list = new ListClass(256);
  GatherPicture(list, each unions);
  return list;
}

PeopleAndUnions = Unions + People;
SortedEvents    = SortEvents(PeopleAndUnions + Stories);
PictureList     = GatherPictures(Unions);

//===============================================================================================================
// Class definitions
//===============================================================================================================

abstract class EventClass {
  var Date,
      Icon,
      Place,
      HasPicture;

  init(date) {
    Date = date;
  }

  virtual ShowFullEvent = null;

  abstract DrawTimeline;

  virtual AddEvent(list) {
    list.Add(this);
  }

  virtual DrawListing(level) {
  }

  virtual FindChildren(set, parent) {
  }

  virtual FormatNode(parent) {
  }

  virtual ShowParents {
  }

  ImagePath = IO.Folders.Main IO.FileName(this.Name) IO.Extensions.JPG;

  AddPicture(size) = IO.Read(ImagePath) {
    Size: size;
    Proportional: true;
  };
}
//===============================================================================================================

class PersonClass: EventClass {
  var Parent,
      Death,
      First,
      Middle,
      Last,
      Nee,
      NickName,
      DeathDateUnknown;

  init(first, middle, last, parent) {
    super.init(null);
    First  = first;
    Middle = middle;
    Last   = last;
    Parent = parent;
  }

  override AddEvent(list) {
    list.Add(this);
    if (Death)
      list.Add(new PassingClass(this));
  }

  override FindChildren(set, parent) = set.Add(this) && Parent == parent;

  override FormatNode(parent) = {
    Label: TreePerson(null)
  };

  override DrawTimeline = {
    ShowFullLink(false);
    Space;
    "was born"
  };

  override DrawListing(level) = Styles.LevelPar(level, false) {
    ShowListing;
  };

  override ShowFullEvent = Block {
    if (HasPicture) {
      Paragraph {
        SpaceAfter: 10 pts;
        Group {
          Padding: 2 pts;
          VAlign: VAligns.Top;
          Frame {
            Width: Metrics.Content.Width - Metrics.PersonPicture.Width;
            Block {
              ShowFullPersonData;
            };
          };
          AddPicture(Metrics.PersonPicture);
        }
      }
    }
    else {
      ShowFullPersonData;
      Paragraph;
    }
  };

  ShowFullName(former) = Span {
    Separator: Space;
    First;
    Middle;
    if (former)
      Nee ?? Last;
    else
      Last;
  };

  ShowFullLink(former) = ShowFullName(former) {
    Link: Key;
    Popup: ref Popup;
  };

  ShowListing = Span {
    Icon;
    Space;
    ShowFullLink(false);
    if (Nee)
      " (neé {0})"(Nee);

    if (Death) {
      Span {
        TextColor: Colors.DarkGray;
        Styles.TextDate(", died ", Death);
      }
    }
  };

  TreePerson(parent) = Group {
    VAlign: VAligns.Center;
    Span {
      Span {
        if (parent == Parent)
          TextColor: Colors.White;
        else
          TextColor: Metrics.IconColor;
        Icon;
      };
      Space;
      Link: Key;
      Popup: ref Popup;
      NickName ?? First;
    }
  };

  ShowFullPersonData = Block {
    FullPar {
      LocationMark: Key;
      LeftIndent: Metrics.LevelIndent;
      FirstIndent: -Metrics.LevelIndent;
      TextHeight: 16 pts;
      Icon;
      Tab;
      ShowFullName(false) {
        if (NickName) {
          Span {
            " - \"";
            NickName;
            "\""
          };
        }
      };
    };
    if (Nee) {
      FullPar {
        Italic "neé ";
        ShowFullName(true)
      }
    }

    if (Date) {
      if (DeathDateUnknown) {
        FullPar {
          "Unknown time of death";
        }
      }
      else {
        if (not Death and (Metrics.CurrentDate - Date).Years < 100) {
          FullPar {
            "{0} years old"(Math.Floor((Metrics.CurrentDate - Date).Years))
          };
        }
      }
      FullPar {
        if (Date)
          Styles.TextDate("Born ", Date);

        if (Death) {
          LineBreak;
          Styles.DiedAge(this)
        }

        if (Place) {
          " in ";
          Styles.ShowPlace(Place);
        }
      };
    }

    Parent?.ShowParents;
    ShowChildren;
  };

  ShowChildren {
    var unions = Unions.FindSlice(union => union.Partner1 == this or union.Partner2 == this);
    if (unions.Length > 0) {
      var children = CollectChildren(People, unions[0]);
      if (children.Length > 0) {
        return FullPar {
          "Children: ";
          Span {
            Separator: ", ";
            LastSeparator: " and ";
            (each children).ShowFullLink(false);
          }
        };
      }
    }
    else
      return null;
  }

  PortraitFrame(angle) = Canvas {
    BorderT: 4 pts {Color: TopColor..BottomColor {Vertical: true}};
    BorderLR: 4 pts {Color: TopColor..BottomColor};
    BorderB: 4 pts {Color: TopColor..BottomColor {Vertical: true}};

    Transform: Rotate(angle) Skew(angle, angle);
    TransformFit: true;
    IO.Read(ImagePath) {
      Link: Key;
      Popup: ref Popup;
      Size: Size(Metrics.PortraitHeight);
      Proportional: true;
    };
  };

  Popup = Frame {
    if (HasPicture)
      Width: Metrics.Content.Width;
    else
      Width: Metrics.Content.Width - Metrics.PersonPicture.Width;
    ShowFullEvent;
  };

  ShowLink(text=null) = Span {
    Link: Key;
    Popup: ref Popup;
    TextColor: Colors.Blue;
    text ?? (NickName ?? First);
  };
}
//===============================================================================================================

class Female: PersonClass {
  init(first, middle, last, parent=null) {
    super.init(first, middle, last, parent);
    Icon = Styles.TextIcon(Chars.WhiteCircle);
  }
}

class Male: PersonClass {
  init(first, middle, last, parent=null) {
    super.init(first, middle, last, parent);
    Icon = Styles.TextIcon(Chars.WhiteSquare);
  }
}
//===============================================================================================================

class Union: EventClass {
  var Partner1,
      Partner2;

  init(partner1, partner2, date=null) {
    System.Assert(partner1 and partner2, "Expecting both partners");
    super.init(date);
    Partner1 = partner1;
    Partner2 = partner2;
    Icon     =  Styles.TextIcon("\u2A01");
  }

  override FormatNode(parent) = {
    Marker: Group {
      Vertical: true;
      Background: Metrics.BoxColor;
      Partner1.TreePerson(parent);
      Partner2.TreePerson(parent);
    };
  };

  override FindChildren(set, parent) {
    set.Add(Partner1);
    set.Add(Partner2);
    return Partner1.Parent == parent or Partner2.Parent == parent;
  }

  override DrawTimeline = {
    Partner1.ShowFullLink(true);
    Space;
    "married";
    Space;
    Partner2.ShowFullLink(true);
  };

  override DrawListing(level) = Block {
    Styles.LevelPar(level) {
      Partner1.ShowListing;
    };
    Styles.LevelPar(level) {
      Tab;
      Span {
        Icon;
        Space;
        TextColor: Metrics.IconColor
      };
      Styles.TextDate(Space, Date);
    };
    Styles.LevelPar(level) {
      Partner2.ShowListing;
    }
  };

  Title = Span {
    Partner1.ShowFullName(false);
    " and ";
    Partner2.ShowFullName(false);
  };

  override ShowParents = FullPar {
    "Parents: ";
    if (Partner1) {
      Partner1.ShowFullLink(false);
      " and ";
    }
    Partner2?.ShowFullLink(false)
  };

  ShowPortrait = Group {
    VAlign: VAligns.Top;
    Partner1.PortraitFrame(-Metrics.PortraitAngle);
    Canvas {
      MarginTB: 8 pts;
      Width: 2 pts;
      Height: Metrics.PortraitHeight - 8 pts;
      Background: 60%;
    };
    Partner2.PortraitFrame(Metrics.PortraitAngle);
  };
}
//===============================================================================================================

class PassingClass: EventClass {
  var Person;

  init(person) {
    super.init(person.Death);
    Person = person;
    Icon   = Styles.TextIcon("\u2A4D");
  }

  override DrawTimeline = Span {
    Person.ShowFullLink(false);
    " died";
    Styles.DiedAtAge(Person)
  };
}
//===============================================================================================================

class Story: EventClass {
  var ToldBy,
      Text,
      Title;

  init(toldby, title, date=null) {
    super.init(date);
    ToldBy = toldby;
    Title  = title;
    Icon   = Styles.TextIcon("\u25A4");
  }

  override DrawTimeline = Span {
    Popup: ref Popup;
    Link: Key;
    Title;
  };

  Popup = Frame {
    Width: Metrics.StoryPicture.Width;
    ShowFullEvent;
  };

  override ShowFullEvent = Block {
    Paragraph {
      KeepWithNext: true;
      TabStops: [Metrics.Content.Width {Type: TabTypes.Right}];
      SpaceBefore: 16 pts;
      ParBackground: 90%;
      LocationMark: Key;
      Span {
        Bold;
        TextHeight: 14 pts;
        Title;
      };
      if (Date) {
        " - ";
        Styles.ShowDate(Date);
      }
      if (ToldBy) {
        Tab;
        "by ";
        ToldBy.ShowFullLink(false)
      }
    };
    if (HasPicture) {
      Paragraph {
        Text
      };
      Paragraph {
        AddPicture(Metrics.StoryPicture);
      };
    }
    else
      Text;
  };
}
//============================================================================================================
// Document styles
//============================================================================================================

with Styles {
  Header1(text) = Paragraph {
    TextHeight: 18 pts;
    SpaceAfter: 12 pts;
    Bold;
    text
  };

  Header2(text) = Paragraph {
    BorderB: 0.5;
    TextFamily: TextFamilies.Garamond;
    TextHeight: 16 pts;
    SpaceBefore: 12 pts;
    SpaceAfter: 6 pts;
    Bold;
    text
  };

  TextIcon(text) = Span {
    TextFamily: TextFamilies.CambriaMath;
    text
  };

  ShowDate(d) = Span {
    if (d.Precision == DatePrecisions.Year)
      TextFormat: "yyyy";
    else {
      if (d.Precision == DatePrecisions.Month)
        TextFormat: "MMMM yyyy";
      else
        TextFormat: "MMMM dd, yyyy";
    }
    d;
  };

  TimelineDate(d) = Span {
    if (d.Precision == DatePrecisions.Year)
      TextFormat: "yyyy";
    else if (d.Precision == DatePrecisions.Month)
      TextFormat: "yyyy, MMMM";
    else
      TextFormat: "yyyy, MMMM dd";
    d;
  };

  TextDate(text, d) {
    if (d) {
      return Span {
        text;
        Space;
        ShowDate(d);
      };
    }
    else
      return null;
  }

  ShowPlace(place) = Span {
    place.City;
    ", ";
    place.State;
  };

  DiedAge(person) = Span {
    TextDate("Died ", person.Death);
    if (person.Date)
      DiedAtAge(person);
  };

  DiedAtAge(person) = Span {
     ", at age {0}"(Math.Floor((person.Death - person.Date).Years))
  };

  LevelPar(level, border=true) = Paragraph {
    LeftIndent: level*Metrics.LevelIndent + 12 pts;
    FirstIndent: -12 pts;
    if (border)
      BorderL: 3 pts {Color: 90%; Padding: 3 pts};
  };

  Story = Paragraph {
    FirstIndent: 16 pts;
  };
}
//============================================================================================================

FullPar = Paragraph {
  LeftIndent: Metrics.LevelIndent;
};
//============================================================================================================
// Timeline
//============================================================================================================

with Timeline {
  MaxWidth   = Metrics.Content.Width pixels;
  RowHeight  = 9 pts;
  Edge       = 12 pts;
  InnerWidth = MaxWidth - Edge*2;
  MaxRows    = Math.Floor((Metrics.Content.Height pixels - 0.5 inches).DivideUnits(RowHeight));

  AddEvent(event, yearstart, yearend) {
    var frac = (event.Date.Year - yearstart) / (yearend - yearstart + 1);
    var x    = InnerWidth * frac;
    if (frac > 0.5) {
      return Canvas {
        Y: RowHeight * EachIndex;
        Width: x;
        HAlign: HAligns.Right;
        Span {
          event.DrawTimeline;
          Space;
          event.Icon {TextColor: Metrics.IconColor};
        }
      };
    }
    else {
      return Canvas {
        X: x;
        Y: RowHeight * EachIndex;
        Span {
          event.Icon {TextColor: Metrics.IconColor};
          Space;
          event.DrawTimeline;
        }
      };
    }
  }

  ShowBlock(events) {
    var yearstart  = (Math.Floor(events.FirstElement.Date.Year) div 10) * 10; // Round down to the nearest 10 years
    var yearend    = (Math.Floor(events.LastElement.Date.Year + 9) div 10) * 10; // Round up to the nearest 10 years

    return Paragraph {
      SpaceAfter: 10 pts;
      Group {
        Vertical: true;
        Group {
          Vertical: true;
          ChartAxis {
            Width: MaxWidth;
            Start: yearstart;
            Stop: yearend;
          };
        };
        Canvas {
          X: Edge;
          Width: InnerWidth;
          Border: 0.25 pts;
          TextHeight: 8 pts;
          AddEvent(each events, yearstart, yearend);
        }
      }
    };
  }

  AddRows(event) = Paragraph {
    LeftIndent: Metrics.DateIndent;
    FirstIndent: -Metrics.DateIndent;
    Styles.TimelineDate(event.Date);
    Tab;
    Tab;
    event.Icon {TextColor: Metrics.IconColor};
    Space;
    event.DrawTimeline
  };

  Show = DocSection("Timeline") {
    ShowBlock(each (SortedEvents / MaxRows));
//    Styles.Header2("Timeline Details");
//    AddRows(each SortedEvents);
  };
}
//============================================================================================================
// Tree
//============================================================================================================

CollectChildren(list, c) {
  var set = new DictionaryClass(PeopleAndUnions.Length);
  return list.FindSlice(person => person.FindChildren(set, c));
}

MakeTreeNodes(list, parent, event) = Node {
  event.FormatNode(parent);
  MakeTreeNodes(list, event, each CollectChildren(list, event))
};
//============================================================================================================
//  Family member listing
//============================================================================================================

BuildListing(list, event, level) = Block {
  event.DrawListing(level);
  BuildListing(list, each CollectChildren(list, event), level+1);
};

WhiteCircle = Span {
  TextFamily: TextFamilies.CambriaMath;
  TextBackground: Colors.White;
  Chars.WhiteCircle
};

Leaf = Node {
  Marker: WhiteCircle
};

IconTree = Node {
  Node {
    Leaf {Branch: 4};
    Node {
      Branch: 2;
      Leaf {Branch: 2};
      Node {
        Leaf;
        Leaf;
      }
    }
  };
  Node {
    Branch: 3;
    Node {
      Leaf;
      Leaf;
    };
    Leaf {Branch: 2}
  }
};

HeaderFormat = Paragraph {
  TextHeight: 10 pts;
  TextFamily: TextFamilies.TimesNewRoman;
  BorderBottom: 0.25 pts;
};

DocSection(title) = Section {
  SectionBreak: SectionBreaks.NextPage;
  Header: Block {
    Distance: 0.5 inches;
    HeaderFormat {
      ParAlignment: ParAlignments.Right;
      title
    };
  };
  Footer: Block {
    Distance: 0.5 inches;
    Paragraph {
      ParAlignment: ParAlignments.Center;
      PageNumber
    };
  };
};

TopColor    = 94%;
BottomColor = 80%;

ShowPortraitLine(unions) = Paragraph {
  Group {
    Separator: Space*3;
    (each unions).ShowPortrait
  }
};

AlbumTitlePage(title) = Section {
  SectionBreak: SectionBreaks.NextPage;
  ParAlignment: ParAlignments.Center;
  Paragraph {
    SpaceBefore: 1 inch;
    TextHeight: 36 pts;
    title;
  };
  Paragraph {
    Tree {
      Height: 60 pts;
      Marker: Styles.TextIcon(Chars.Square) {TextColor: Metrics.BoxColor};
      Vertical: true;
      Reverse: true;
      Stroke: 2 pts {Color: Metrics.LineColor};
      Curvature: 20%;
      Bevel: 20%;
      NodeGap: 20 pts;
      IconTree
    };
  };
  Paragraph {
    SpaceAfter: 24 pts;
    TextHeight: 16 pts;
    Styles.ShowDate(Metrics.CurrentDate);
  };
  ShowPortraitLine(each (PictureList / 3));
};

ShowFamilyLine(union) = DocSection(union.Title) {
  SectionBreak: SectionBreaks.NextPage;
  Styles.Header2("Tree Details");
  BuildListing(PeopleAndUnions, union, 0);
};

ShowTree(title, line) = Section {
  SectionBreak: SectionBreaks.NextPage;
  Margin: Metrics.TreeMargin;
  Styles.Header1("The Descendants of " line.Root.Title);
  Tree {
    TextHeight: line.TextHeight;
    NodeGap: line.NodeGap;
    Width: Metrics.TreeContent.Width;
    Bevel: 10%;
    Curvature: 10%;
    Stroke: 0.25 pts {Color: Metrics.LineColor};
    MakeTreeNodes(PeopleAndUnions, null, line.Root);
  };
};

NameSort(p1, p2) {
  var last = p1.Last.Compare(p2.Last);
  if (last == 0)
    return p1.First.Compare(p2.First);
  return last;
}

ShowFamilyMembers(title) = DocSection(title) {
  Styles.Header2(title);
  (each People.Sort(true, NameSort)).ShowFullEvent;
};

FamilyAlbum(title, lines) = Document {
  Size: Metrics.Paper;
  Margin: Metrics.MainMargin;
  AlbumTitlePage(title);
  ShowTree(title, each lines);
  if (Stories.Length > 0) {
    DocSection("Stories") {
      Styles.Header2(title);
      (each Stories).ShowFullEvent;
    }
  }

  Timeline.Show;
  ShowFamilyMembers("Family Members");
};
//============================================================================================================


